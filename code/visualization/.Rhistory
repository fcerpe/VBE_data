method <- "expansion"
area <- "VWFA"
viz_processROI("expansion", "VWFA")
source("viz_processROI.R")
viz_processROI("expansion", "VWFA")
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
multiclass <- viz_dataset_clean(multiclass)
if(method == 'expansion')
multiclass <- multiclass %>% filter(mask == area)
## Stats - permutations done in MATLAB
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
# Summarize information for plot
multiclass_stats <- viz_dataset_stats(multiclass)
viz_stats_multiclass(multiclass_stats, name_specs)
history(100)
statsIn <- multiclass_stats
specs <- name_specs
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- statsIn %>% filter(cluster == "french_experts")
expbr <- statsIn %>% filter(cluster == "braille_experts")
ctrfr <- statsIn %>% filter(cluster == "french_controls")
ctrbr <- statsIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
View(ctrfr)
statsIn <- multiclass
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- statsIn %>% filter(cluster == "french_experts")
expbr <- statsIn %>% filter(cluster == "braille_experts")
ctrfr <- statsIn %>% filter(cluster == "french_controls")
ctrbr <- statsIn %>% filter(cluster == "braille_controls")
View(expbr)
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
method <- "expansion"
area <- "VWFA"
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
multiclass <- viz_dataset_clean(multiclass)
if(method == 'expansion')
multiclass <- multiclass %>% filter(mask == area)
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
dataIn <- multiclass
specs <- name_specs
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
View(expbr)
View(expbr)
View(expbr)
multiclass_stats <- viz_dataset_stats(multiclass)
View(multiclass_stats)
savename <- paste(specs, "_stats-ttest-multiclass-PROVA.csv", sep="")
dataIn <- multiclass_stats
View(multiclass)
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
ttest = t.test(expfr$mean_accuracy, expbr$mean_accuracy, alternative = "two.sided", paired = T)
dataIn <- multiclass
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
ttest = t.test(expfr$mean_accuracy, expbr$mean_accuracy, alternative = "two.sided", paired = T)
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
View(ttest)
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
# EXP-FR and EXP-BR
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = expfr$cluster[1], group2 = expbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-FR
ttest = t.test(expfr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-BR
ttest = t.test(expfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-FR
ttest = t.test(expbr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-BR
ttest = t.test(expbr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# CTR-FR and CTR-BR
ttest = t.test(ctrfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = ctrfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
View(tests_table)
ttest = t.test(ctrfr$accuracy)
savename <- paste(specs, "_stats-ttest-multiclass-PROVA.csv", sep="")
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
# EXP-FR and EXP-BR
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = expfr$cluster[1], group2 = expbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-FR
ttest = t.test(expfr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-BR
ttest = t.test(expfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-FR
ttest = t.test(expbr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-BR
ttest = t.test(expbr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# CTR-FR and CTR-BR
ttest = t.test(ctrfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = ctrfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# One-sample tests
ttest = t.test(expfr$accuracy)
result <- data.table(group1 = expfr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(expbr$accuracy)
result <- data.table(group1 = expbr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(ctrfr$accuracy)
result <- data.table(group1 = ctrfr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(ctrbr$accuracy)
result <- data.table(group1 = ctrbr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
View(tests_table)
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
### Additional stats and plots
# Some stats and plots are standalone (e.g. PPI)
# to they don't fit in the pipeline
# Can be run altogether or individually in 'visualization/viz_additionalAnalyses.R'
# viz_additionalAnalyses()
viz_processROI("expansion", "VWFA")
source("viz_processROI.R")
viz_processROI("expansion", "VWFA")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
### Additional stats and plots
# Some stats and plots are standalone (e.g. PPI)
# to they don't fit in the pipeline
# Can be run altogether or individually in 'visualization/viz_additionalAnalyses.R'
# viz_additionalAnalyses()
