cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
source("viz_supportFunctions.R")
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
area <- "rLO"
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
## Stats
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
## Plots
# Summarize information for plot
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
## Load correct file
decoding <- "pairwise"
modality <- "cross"
group <- "experts"
cross <- dataset_import(decoding, modality, group, space, roi)
cross <- dataset_clean(cross)
if(method == 'expansion')
cross <- cross %>% filter(mask == area)
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
## Plots
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
# Summarize information for plot
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
source("viz_supportFunctions.R")
plot_cross(cross, cross_stats, name_specs, area)
source("viz_supportFunctions.R")
plot_cross(cross, cross_stats, name_specs, area)
method <- "earlyVisual"
area <- "V1"
### Pairwise decoding
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
## Stats
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
## Plots
# Summarize information for plot
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
decoding <- "pairwise"
modality <- "cross"
group <- "experts"
cross <- dataset_import(decoding, modality, group, space, roi)
cross <- dataset_clean(cross)
if(method == 'expansion')
cross <- cross %>% filter(mask == area)
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
method <- "languge"
method <- "lPosTemp"
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
method <- "languge"
area <- "lPosTemp"
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
method <- "language"
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
## Stats
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
## Load correct file
decoding <- "pairwise"
modality <- "cross"
group <- "experts"
cross <- dataset_import(decoding, modality, group, space, roi)
cross <- dataset_clean(cross)
if(method == 'expansion')
cross <- cross %>% filter(mask == area)
# Generate filename
name_specs <- make_specs(decoding, modality, group, space, area)
cross_stats <- dataset_stats(cross)
# Plot: all modalities, only both, two directions
plot_cross(cross, cross_stats, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
plot_cross_average(cross, name_specs, area)
source("viz_processROI.R")
source("viz_processROI.R")
source("viz_additionalAnalyses.R")
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# Add all necessary libraries
source("viz_processROI.R")
source("viz_additionalAnalyses.R")
source("viz_supportFunctions.R")
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
source("viz_supportFunctions.R")
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
library(ggplot2)
library(gridExtra)
library(gtable)
source("viz_processROI.R")
# Load the tsv
data <- read.delim("../stats/reports/stimuli_pixel_information.tsv", header = TRUE, sep = "\t")
# Convert 'pixels' column from string to numeric vector
data$pixels <- sapply(data$pixels, function(x) as.numeric(strsplit(x, ",")[[1]]))
View(data)
data <- read.delim("../stats/reports/stimuli_pixel_information.tsv", header = TRUE, sep = "\t")
# Convert 'pixels' column from string to numeric vector
data$pixels <- sapply(data$pixels, function(x) as.numeric(strsplit(x, ",")[[1]]))
View(data)
data[[1]]
data[1]
data$pixels[[1]]
len(data$pixels[[1]])
length(data$pixels[[1]])
# Load the tsv
data <- read.delim("../stats/reports/stimuli_pixel_information.tsv", header = TRUE, sep = "\t")
data$pixels <- as.character(data$pixels)
data$pixels <- lapply(data$pixels, function(x) as.numeric(strsplit(x, ",")[[1]]))
View(data)
View(data)
data$pixels[[1]]
type(data$pixels[[1]])
str(data)
pixels_matrix <- do.call(rbind, data$pixels)  # Combine the list of numeric vectors into a matrix
# Calculate the correlation matrix for the rows of the matrix
cor_matrix <- cor(pixels_matrix)
# Convert correlation matrix to a distance matrix (1 - correlation)
distance_matrix <- 1 - cor_matrix
# View the distance matrix
print(distance_matrix)
# Optional: You can convert it into a data frame for easier reading
distance_df <- as.data.frame(distance_matrix)
pixels_matrix <- do.call(rbind, data$pixels)  # Combine the list of numeric vectors into a matrix
# Combine 'class' and 'stimulus' into a unique identifier for each pair
data$class_stimulus <- paste(data$class, data$stimulus, sep = "_")
# Now create a unique combination of 'class' and 'stimulus'
unique_combinations <- unique(data$class_stimulus)
# Initialize an empty distance matrix
distance_matrix <- matrix(NA, nrow = length(unique_combinations), ncol = length(unique_combinations))
rownames(distance_matrix) <- unique_combinations
colnames(distance_matrix) <- unique_combinations
# Calculate the distance matrix based on correlation for each combination of 'class' and 'stimulus'
for (i in 1:length(unique_combinations)) {
for (j in i:length(unique_combinations)) {
# Get the pixel vectors for the i-th and j-th combinations
i_pixels <- pixels_matrix[data$class_stimulus == unique_combinations[i], ]
j_pixels <- pixels_matrix[data$class_stimulus == unique_combinations[j], ]
# Calculate correlation between the pixel vectors
if (length(i_pixels) > 0 & length(j_pixels) > 0) {
correlation <- cor(i_pixels, j_pixels)  # Correlation between pixel vectors
distance_matrix[i, j] <- 1 - correlation  # Convert correlation to distance
distance_matrix[j, i] <- distance_matrix[i, j]  # Symmetric distance matrix
}
}
}
# View the resulting distance matrix
print(distance_matrix)
View(distance_matrix)
# Initialize empty distance matrices
corr_matrix <- matrix(NA, nrow = length(unique_combinations), ncol = length(unique_combinations))
eucl_matrix <- matrix(NA, nrow = length(unique_combinations), ncol = length(unique_combinations))
rownames(distance_matrix) <- unique_combinations
colnames(distance_matrix) <- unique_combinations
## 1 - correlation
# Calculate the distance matrix based on correlation for each combination of 'class' and 'stimulus'
for (i in 1:length(unique_combinations)) {
for (j in i:length(unique_combinations)) {
# Get the pixel vectors for the i-th and j-th combinations
i_pixels <- pixels_matrix[data$class_stimulus == unique_combinations[i], ]
j_pixels <- pixels_matrix[data$class_stimulus == unique_combinations[j], ]
# Calculate correlation between the pixel vectors
if (length(i_pixels) > 0 & length(j_pixels) > 0) {
correlation <- cor(i_pixels, j_pixels)  # Correlation between pixel vectors
corr_matrix[i, j] <- 1 - correlation  # Convert correlation to distance
corr_matrix[j, i] <- corr_matrix[i, j]  # Symmetric distance matrix
}
}
}
# View the resulting distance matrix
print(corr_matrix)
## Euclidean distance
# Calculate the distance matrix based on Euclidean distance for each combination of 'class' and 'stimulus'
for (i in 1:length(unique_combinations)) {
for (j in i:length(unique_combinations)) {
# Get the pixel vectors for the i-th and j-th combinations
i_pixels <- data$pixels[[which(data$class_stimulus == unique_combinations[i])]]
j_pixels <- data$pixels[[which(data$class_stimulus == unique_combinations[j])]]
# Compute the Euclidean distance (sum of squared differences)
euclidean_distance <- sqrt(sum((i_pixels - j_pixels)^2))
# Store the distance in the matrix
eucl_matrix[i, j] <- euclidean_distance
eucl_matrix[j, i] <- euclidean_distance  # Symmetric distance matrix
}
}
# View the resulting distance matrix
print(eucl_matrix)
View(eucl_matrix)
# Add all necessary libraries
source("viz_processROI.R")
source("viz_additionalAnalyses.R")
method <- "neurosynth"
area <- "VWFAfr"
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
## Stats
# Generate filename
name_specs <- make_specs(decoding, roi, modality, group, space, area)
# Run ANOVAs
pairwise_anova_fr <- stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- stats_rmANOVA(pairwise, 2)
# Make summary table to show
stats_summary(pairwise_anova_fr, "french", name_specs)
stats_summary(pairwise_anova_br, "braille", name_specs)
stats_summary(pairwise_anova_both, "both", name_specs)
# t-tests on pairwise averages
# stats_pairwise_average(pairwise, name_specs)
## Plots
# Summarize information for plot
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
pairwise_stats <- dataset_stats(pairwise)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
# Decoding
plot_pairwise(pairwise, pairwise_stats, name_specs, area)
plot_pairwise_average(pairwise, name_specs, area)
View(pairwise)
View(pairwise_stats)
# Add all necessary libraries
source("viz_processROI.R")
source("viz_additionalAnalyses.R")
method <- "neurosynth"
area <- "VWFAfr"
area <- "visualWords"
source("viz_supportFunctions.R")
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- dataset_import(decoding, modality, group, space, roi)
View(pairwise)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
View(pairwise_br)
name_specs <- make_specs(decoding, roi, modality, group, space, area)
pairwise_anova_fr <- stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- stats_rmANOVA(pairwise, 2)
# Make summary table to show
stats_summary(pairwise_anova_fr, "french", name_specs)
stats_summary(pairwise_anova_br, "braille", name_specs)
stats_summary(pairwise_anova_both, "both", name_specs)
pairwise_anova_fr <- stats_rmANOVA(pairwise_fr, 1)
View(pairwise_anova_fr)
stats_summary(pairwise_anova_fr, "french", name_specs)
pairwise_stats <- dataset_stats(pairwise)
View(pairwise_stats)
pairwise_stats_fr <- dataset_stats(pairwise_fr)
pairwise_stats_br <- dataset_stats(pairwise_br)
plot_pairwise_average(pairwise, name_specs, area)
View(pairwise)
dataIn <- pairwise
specs <- name_specs
area <- area
subAverages <- dataIn %>% group_by(subID, group, script, cluster) %>%
summarize(mean_accu = mean(accuracy), sd_accu = sd(accuracy), se_accu = sd(accuracy)/sqrt(6), .groups = 'keep')
View(subAverages)
statsIn <- subAverages %>% group_by(cluster) %>%
summarize(mean_accuracy = mean(mean_accu), sd_accuracy = sd(mean_accu), se_accuracy = sd(mean_accu)/sqrt(6), .groups = 'keep')
View(statsIn)
savename <- paste("../../outputs/derivatives/figures/MVPA/", specs, "_plot-pairwise-average.png", sep="")
savename
ggplot(statsIn, aes(x = cluster, y = mean_accuracy)) +
scale_color_manual(name = "    ",
limits = c("french_experts",   "french_controls",  "braille_experts",    "braille_controls"),
values = c("#69B5A2",         "#4C75B3",         "#FF9E4A",          "#da5F49"),
labels = c("expert - french", "control - french", "expert - braille", "control - braille")) +
# Mean and SE bars
geom_pointrange(aes(x = cluster,
y = mean_accuracy,
ymin = mean_accuracy - se_accuracy,
ymax = mean_accuracy + se_accuracy,
colour = cluster),
position = position_dodge(1), size = .75, linewidth = 1.7) +
# Individual data clouds
geom_point(data = subAverages,
aes(x = cluster,
y = mean_accu,
colour = cluster),
position = position_jitter(w = 0.3, h = 0.01, seed = NA),
alpha = 0.3, na.rm = FALSE) +
geom_hline(yintercept = 0.50, size = .25, linetype = "dashed") +
theme_classic() +
ylim(0.1,1) +
theme(axis.text.x = element_text(size = 12, family = "Avenir", color = "black"),
axis.text.y = element_text(size = 12, family = "Avenir", color = "black"),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 12, family = "Avenir", color = "black", vjust = 0),
axis.title.y = element_text(size = 12, family = "Avenir", color = "black", vjust = 2),
legend.position = "none") +
scale_x_discrete(limits = rev,
labels = c("Latin\nExperts",
"Latin\nControls",
"Braille\nExperts",
"Braille\nControls")) +
labs(x = "Script x group", y = "Decoding accuracy")
ggsave(savename, width = 2200, height = 1800, dpi = 500, units = "px")
pairwise_anova_fr <- stats_rmANOVA(pairwise_fr, 1)
stats_summary(pairwise_anova_fr, "french", name_specs)
dataIn <- pairwise_anova_fr
analysis <- "french"
specs <- name_specs
dataAnova <- dataIn$ANOVA
colsToTrim <- sapply(dataAnova, is.numeric)
View(dataAnova)
View(dataAnova)
stats_pairwise_average(pairwise, name_specs)
