method <- "expansion"
area <- "VWFA"
viz_processROI("expansion", "VWFA")
source("viz_processROI.R")
viz_processROI("expansion", "VWFA")
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
multiclass <- viz_dataset_clean(multiclass)
if(method == 'expansion')
multiclass <- multiclass %>% filter(mask == area)
## Stats - permutations done in MATLAB
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
# Summarize information for plot
multiclass_stats <- viz_dataset_stats(multiclass)
viz_stats_multiclass(multiclass_stats, name_specs)
history(100)
statsIn <- multiclass_stats
specs <- name_specs
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- statsIn %>% filter(cluster == "french_experts")
expbr <- statsIn %>% filter(cluster == "braille_experts")
ctrfr <- statsIn %>% filter(cluster == "french_controls")
ctrbr <- statsIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
View(ctrfr)
statsIn <- multiclass
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- statsIn %>% filter(cluster == "french_experts")
expbr <- statsIn %>% filter(cluster == "braille_experts")
ctrfr <- statsIn %>% filter(cluster == "french_controls")
ctrbr <- statsIn %>% filter(cluster == "braille_controls")
View(expbr)
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
method <- "expansion"
area <- "VWFA"
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
decoding <- "multiclass"
multiclass <- viz_dataset_import(decoding, modality, group, space, roi)
multiclass <- viz_dataset_clean(multiclass)
if(method == 'expansion')
multiclass <- multiclass %>% filter(mask == area)
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
dataIn <- multiclass
specs <- name_specs
savename <- paste(specs, "_stats-ttest-multiclass.csv", sep="")
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
View(expbr)
View(expbr)
View(expbr)
multiclass_stats <- viz_dataset_stats(multiclass)
View(multiclass_stats)
savename <- paste(specs, "_stats-ttest-multiclass-PROVA.csv", sep="")
dataIn <- multiclass_stats
View(multiclass)
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
ttest = t.test(expfr$mean_accuracy, expbr$mean_accuracy, alternative = "two.sided", paired = T)
dataIn <- multiclass
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
ttest = t.test(expfr$mean_accuracy, expbr$mean_accuracy, alternative = "two.sided", paired = T)
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
View(ttest)
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
# EXP-FR and EXP-BR
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = expfr$cluster[1], group2 = expbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-FR
ttest = t.test(expfr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-BR
ttest = t.test(expfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-FR
ttest = t.test(expbr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-BR
ttest = t.test(expbr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# CTR-FR and CTR-BR
ttest = t.test(ctrfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = ctrfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
View(tests_table)
ttest = t.test(ctrfr$accuracy)
savename <- paste(specs, "_stats-ttest-multiclass-PROVA.csv", sep="")
expfr <- dataIn %>% filter(cluster == "french_experts")
expbr <- dataIn %>% filter(cluster == "braille_experts")
ctrfr <- dataIn %>% filter(cluster == "french_controls")
ctrbr <- dataIn %>% filter(cluster == "braille_controls")
tests_table <- data.table(group1 = character(), group2 = character(), ttest = numeric(), pvalue = numeric())
# Manually calculate t-tests
# EXP-FR and EXP-BR
ttest = t.test(expfr$accuracy, expbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = expfr$cluster[1], group2 = expbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-FR
ttest = t.test(expfr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-FR and CTR-BR
ttest = t.test(expfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-FR
ttest = t.test(expbr$accuracy, ctrfr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrfr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# EXP-BR and CTR-BR
ttest = t.test(expbr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = F)
result <- data.table(group1 = expbr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# CTR-FR and CTR-BR
ttest = t.test(ctrfr$accuracy, ctrbr$accuracy, alternative = "two.sided", paired = T)
result <- data.table(group1 = ctrfr$cluster[1], group2 = ctrbr$cluster[1],
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
# One-sample tests
ttest = t.test(expfr$accuracy)
result <- data.table(group1 = expfr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(expbr$accuracy)
result <- data.table(group1 = expbr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(ctrfr$accuracy)
result <- data.table(group1 = ctrfr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
ttest = t.test(ctrbr$accuracy)
result <- data.table(group1 = ctrbr$cluster[1], group2 = "One-sample",
ttest = ttest[[1]], pvalue = ttest[3])
tests_table <- rbind(tests_table, result)
View(tests_table)
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
### Additional stats and plots
# Some stats and plots are standalone (e.g. PPI)
# to they don't fit in the pipeline
# Can be run altogether or individually in 'visualization/viz_additionalAnalyses.R'
# viz_additionalAnalyses()
viz_processROI("expansion", "VWFA")
source("viz_processROI.R")
viz_processROI("expansion", "VWFA")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
source("viz_processROI.R")
# source("viz_additionalAnalyses.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perform statistical analyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
### Additional stats and plots
# Some stats and plots are standalone (e.g. PPI)
# to they don't fit in the pipeline
# Can be run altogether or individually in 'visualization/viz_additionalAnalyses.R'
# viz_additionalAnalyses()
univariate <- matrix(c(1, 5,
11, 1),
ncol = 2, byrow = T)
colnames(univariate) <- c("No","Yes")
rownames(univariate) <- c("Expert","Control")
data <- as.table(univariate)
View(univariate)
View(univariate)
chisq.test(univariate)
# Comparison between groups in terms of Braille activation
# Chi-square test on the number of subjects in each group that present VWFA
# activation for Braille
stats_brailleActivations()
getwd()
# Comparison between groups in terms of Braille activation
# Chi-square test on the number of subjects in each group that present VWFA
# activation for Braille
stats_brailleActivations
source("viz_supportFunctions.R")
source("viz_supportFunctions.R")
### Load decodings - from support functions
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
source("viz_supportFunctions.R")
# Load file - use support functions
pairwise <- viz_dataset_import("pairwise", "within", "all", "IXI549Space", "expansion")
pairwise <- viz_dataset_clean(pairwise)
pairwise <- pairwise %>% filter(mask == "VWFA")
pairwise_stats <- viz_dataset_stats(pairwise)
ggplot(statsIn, aes(x = decodingCondition, y = mean_accuracy)) +
scale_color_manual(name = "    ",
limits = c("french_experts",   "french_controls",  "braille_experts",    "braille_controls"),
values = c("#69B5A2",         "#699ae5",         "#FF9E4A",          "#da5F49"),
labels = c("expert - french", "control - french", "expert - braille", "control - braille")) +
# Mean and SE bars
geom_pointrange(aes(x = decodingCondition,
y = mean_accuracy,
ymin = mean_accuracy - se_accuracy,
ymax = mean_accuracy + se_accuracy,
colour = cluster),
position = position_dodge(1), size = .75, linewidth = 1.7) +
# Individual data clouds
geom_point(data = dataIn, aes(x = reorder(decodingCondition, cluster),
y = accuracy,
colour = cluster),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
# Chance-level
geom_hline(yintercept = 0.5, size = .25, linetype = "dashed") +
# Style options
theme_classic() +
ylim(0,1) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15)) +
# Labels
scale_x_discrete(limits=rev,
labels = c("\nFRW - FPW"," ", "\nFRW - FNW"," ", "\nFRW - FFS"," ",
"\nFPW - FNW"," ", "\nFPW - FFS"," ", "\nFNW - FFS"," ",
"\nBRW - BPW"," ", "\nBRW - BNW"," ", "\nBRW - BFS"," ",
"\nBPW - BNW"," ", "\nBPW - BFS"," ", "\nBNW - BFS"," ")) +
labs(x = "Decoding pair", y = "Accuracy")
ggplot(pairwise_stats, aes(x = decodingCondition, y = mean_accuracy)) +
scale_color_manual(name = "    ",
limits = c("french_experts",   "french_controls",  "braille_experts",    "braille_controls"),
values = c("#69B5A2",         "#699ae5",         "#FF9E4A",          "#da5F49"),
labels = c("expert - french", "control - french", "expert - braille", "control - braille")) +
# Mean and SE bars
geom_pointrange(aes(x = decodingCondition,
y = mean_accuracy,
ymin = mean_accuracy - se_accuracy,
ymax = mean_accuracy + se_accuracy,
colour = cluster),
position = position_dodge(1), size = .75, linewidth = 1.7) +
# Individual data clouds
geom_point(data = pairwise, aes(x = reorder(decodingCondition, cluster),
y = accuracy,
colour = cluster),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
# Chance-level
geom_hline(yintercept = 0.5, size = .25, linetype = "dashed") +
# Style options
theme_classic() +
ylim(0,1) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15)) +
# Labels
scale_x_discrete(limits=rev,
labels = c("\nFRW - FPW"," ", "\nFRW - FNW"," ", "\nFRW - FFS"," ",
"\nFPW - FNW"," ", "\nFPW - FFS"," ", "\nFNW - FFS"," ",
"\nBRW - BPW"," ", "\nBRW - BNW"," ", "\nBRW - BFS"," ",
"\nBPW - BNW"," ", "\nBPW - BFS"," ", "\nBNW - BFS"," ")) +
labs(x = "Decoding pair", y = "Accuracy")
# Plot - sandbox to try different options / colors / etc
# Feel free to modify colors in scale and save the hex codes in the name of the file
ggplot(pairwise_stats, aes(x = decodingCondition, y = mean_accuracy)) +
scale_color_manual(name = "    ",
limits = c("french_experts",   "french_controls",  "braille_experts",    "braille_controls"),
values = c("#69B5A2",         "#4C75B3",         "#FF9E4A",          "#da5F49"),
labels = c("expert - french", "control - french", "expert - braille", "control - braille")) +
# Mean and SE bars
geom_pointrange(aes(x = decodingCondition,
y = mean_accuracy,
ymin = mean_accuracy - se_accuracy,
ymax = mean_accuracy + se_accuracy,
colour = cluster),
position = position_dodge(1), size = .75, linewidth = 1.7) +
# Individual data clouds
geom_point(data = pairwise, aes(x = reorder(decodingCondition, cluster),
y = accuracy,
colour = cluster),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
# Chance-level
geom_hline(yintercept = 0.5, size = .25, linetype = "dashed") +
# Style options
theme_classic() +
ylim(0,1) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15)) +
# Labels
scale_x_discrete(limits=rev,
labels = c("\nFRW - FPW"," ", "\nFRW - FNW"," ", "\nFRW - FFS"," ",
"\nFPW - FNW"," ", "\nFPW - FFS"," ", "\nFNW - FFS"," ",
"\nBRW - BPW"," ", "\nBRW - BNW"," ", "\nBRW - BFS"," ",
"\nBPW - BNW"," ", "\nBPW - BFS"," ", "\nBNW - BFS"," ")) +
labs(x = "Decoding pair", y = "Accuracy")
ggsave("figures/plot-sandbox_green-69b5a2_blue-4c75b3_orange-ff9e4a_red-da5f49.png", width = 3000, height = 1800, dpi = 320, units = "px")
