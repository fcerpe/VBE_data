} else {
anovaOut <- ezANOVA(data = dataIn, dv = accuracy, wid = subID, within = .(comparison, script), between = group,
type = 3)
}
anovaOut$ANOVA
View(anovaOut)
anovaOut.aov
anovaOut$aov
# Sample dataframe (replace this with your actual dataframe)
df <- data.frame(
Column1 = c(12.3456789, 45.6789123, 98.7654321),
Column2 = c(23.456789, 56.789123, 78.912345)
)
# Rounding values in the dataframe to 3 decimal places
df_rounded <- round(df, 3)  # Round to 3 decimal places
# Display the rounded dataframe
print(df_rounded)
viz_processROI("expansion", "VWFA")
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
library("ez")
library("tableHTML")
library("htmltools")
library("htmlwidgets")
source("viz_supportFunctions.R")
# ---------------------------------------------------------------------------#
### Pairwise decoding
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- viz_dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- viz_dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
## Stats
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
pairwise_anova_fr <- viz_stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- viz_stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- viz_stats_rmANOVA(pairwise, 2)
name_specs <- viz_make_specs(decoding, modality, group, space, area)
viz_stats_summary(pairwise_anova_fr, "french", name_specs)
dataIn <- pairwise_anova_fr
analysis <- "french"
specs <- name_specs
dataAnova <- round(dataIn$ANOVA, 3)
## Import stats
dataAnova <- dataIn$ANOVA
# Trim decimals
colsToTrim <- sapply(dataAnova, is.numeric)
# Rounding only the numeric columns to 3 decimal places
dataAnova[colsToTrim] <- lapply(dataAnova[colsToTrim], function(x) round(x, 3))
View(dataAnova)
View(dataIn)
viz_processROI("expansion", "VWFA")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
source("viz_processROI.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perfrom statistical anlyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
source("viz_processROI.R")
# CoSMoMVPA folder is common to all files
folder <- "../../code/visualization/output_pipeline/*.csv"
# Find filename, number of voxels changes based on file
matching_files <- list.files(cosmoFolder, pattern = folder, full.names = TRUE)
# Find filename, number of voxels changes based on file
matching_files <- list.files(folder, pattern = folder, full.names = TRUE)
viz_processROI("earlyVisual", "V1")
viz_processROI("earlyVisual", "V1")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
source("viz_processROI.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perfrom statistical anlyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
method <- "expansion"
area <- "VWFA"
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
library("ez")
source("viz_supportFunctions.R")
# ---------------------------------------------------------------------------#
### Pairwise decoding
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- viz_dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- viz_dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
## Stats
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
# Run ANOVAs
pairwise_anova_fr <- viz_stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- viz_stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- viz_stats_rmANOVA(pairwise, 2)
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
# Make summary table to show
viz_stats_summary(pairwise_anova_fr, "french", name_specs)
viz_stats_summary(pairwise_anova_br, "braille", name_specs)
viz_stats_summary(pairwise_anova_both, "both", name_specs)
## RSA - coming soon
## Plots
# Summarize information for plot
pairwise_stats <- viz_dataset_stats(pairwise)
pairwise_stats_fr <- viz_dataset_stats(pairwise_fr)
pairwise_stats_br <- viz_dataset_stats(pairwise_br)
# Decoding
viz_plot_pairwise(pairwise, pairwise_stats, name_specs)
viz_plot_anova(pairwise_stats_fr, name_specs, "french")
viz_plot_anova(pairwise_stats_br, name_specs, "braille")
viz_plot_anova(pairwise_stats, name_specs, "both")
dataIn <- pairwise_stats
specs <- name_specs
# Compose filename and path to save figure
savename <- paste(specs, "_plot-ANOVA-groups.png", sep="")
# Compose extra stats
statsIn <- dataIn %>%
group_by(script, cluster) %>%
summarize(group_accuracy = mean(mean_accuracy), .groups = 'keep')
statsIn$numScript <- c(2,2,1,1)
statsIn$group <- c("controls", "experts", "controls", "experts")
ggplot(statsIn, aes(x = script, y = group_accuracy, color = group)) +
scale_color_manual(name = " ",
limits = c("experts", "controls"),
values = c("#E7CB3F", "#D25BAE"),
labels = c("Experts", "Controls"),
aesthetics = c("colour", "fill")) +
geom_point(size = 3) +
geom_line(aes(group = group), size = 1) +
theme_classic() +
ylim(0.3, 0.8) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) +
scale_x_discrete(limits = rev, labels = c("French", "Braille")) +
labs(x = "Script", y = "Accuracy")
# Save plot
ggsave(savename, width = 1500, height = 1800, dpi = 320, units = "px")
ggplot(statsIn, aes(x = script, y = group_accuracy, color = group)) +
scale_color_manual(name = " ",
limits = c("experts", "controls"),
values = c("#E7CB3F", "#D25BAE"),
labels = c("Experts", "Controls"),
aesthetics = c("colour", "fill")) +
geom_point(size = 3) +
geom_line(aes(group = group), size = 1) +
theme_classic() +
ylim(0.3, 0.8) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) +
scale_x_discrete(limits = rev, labels = c("French", "Braille")) +
labs(x = "Script", y = "Accuracy")
# Save plot
ggsave(savename, width = 1500, height = 1500, dpi = 320, units = "px")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
source("viz_processROI.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perfrom statistical anlyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
viz_processROI("language", "lPosTemp")
method <- language
method <- "language""
c
end
method <- "language"
area <- "lPosTemp"
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
library("ez")
source("viz_supportFunctions.R")
# ---------------------------------------------------------------------------#
### Pairwise decoding
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- viz_dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- viz_dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
## Stats
# Separate scripts
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
# Run ANOVAs
pairwise_anova_fr <- viz_stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- viz_stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- viz_stats_rmANOVA(pairwise, 2)
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
# Make summary table to show
viz_stats_summary(pairwise_anova_fr, "french", name_specs)
viz_stats_summary(pairwise_anova_br, "braille", name_specs)
viz_stats_summary(pairwise_anova_both, "both", name_specs)
## RSA - coming soon
## Plots
# Summarize information for plot
pairwise_stats <- viz_dataset_stats(pairwise)
pairwise_stats_fr <- viz_dataset_stats(pairwise_fr)
pairwise_stats_br <- viz_dataset_stats(pairwise_br)
# Decoding
viz_plot_pairwise(pairwise, pairwise_stats, name_specs)
# Visualize ANOVAs
viz_plot_anova(pairwise_stats_fr, name_specs, "french")
viz_plot_anova(pairwise_stats_br, name_specs, "braille")
viz_plot_anova(pairwise_stats, name_specs, "both")
dataIn <- pairwise_stats
specs <- name_specs
# Compose filename and path to save figure
savename <- paste(specs, "_plot-ANOVA-groups.png", sep="")
# Compose extra stats
statsIn <- dataIn %>%
group_by(script, cluster) %>%
summarize(group_accuracy = mean(mean_accuracy), .groups = 'keep')
statsIn$numScript <- c(2,2,1,1)
statsIn$group <- c("controls", "experts", "controls", "experts")
ggplot(statsIn, aes(x = script, y = group_accuracy, color = group)) +
scale_color_manual(name = " ",
limits = c("experts", "controls"),
values = c("#E7CB3F", "#D25BAE"),
labels = c("Experts", "Controls"),
aesthetics = c("colour", "fill")) +
geom_point(size = 3) +
geom_line(aes(group = group), size = 1) +
theme_classic() +
ylim(0.3, 0.8) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) +
scale_x_discrete(limits = rev, labels = c("French", "Braille")) +
labs(x = "Script", y = "Accuracy")
View(statsIn)
# Plot
ggplot(statsIn, aes(x = script, y = group_accuracy, color = group)) +
scale_color_manual(name = " ",
limits = c("experts", "controls"),
values = c("#E7CB3F", "#D25BAE"),
labels = c("Experts", "Controls"),
aesthetics = c("colour", "fill")) +
geom_point(size = 3) +
geom_line(aes(group = group), size = 1) +
theme_classic() +
ylim(0.3, 0.85) +
theme(axis.text.x = element_text(angle = 45,  vjust=1, hjust=1, size = 10),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) +
scale_x_discrete(limits = rev, labels = c("French", "Braille")) +
labs(x = "Script", y = "Accuracy")
### VISUAL BRAILLE EXPERTISE - DATA VISUALIZATION
#
# Main script to visualize results and perfrom statistical analysis in R
### Set up working directory and libraries
# Add all necessary libraries
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
source("viz_processROI.R")
### Start pipeline
#
# For each of the following ROIs:
# - VWFA
# - l- and r-LO
# - l-PosTemp
# - V1
#
# 1. extract decoding accuracy results for
#    * multiclass decoding,
#    * pairwise decoding,
#    * cross decoding (only in the experts subgroup)
#
# 2. creates representational dissimilarity matrices (RDMs) of the pairwise
#    decoding accuracies
#
# 3. visualize (all plots are saved in data_viz/figures)
#    * multiclass decoding
#    * pairwise decoding
#    * cross decoding (only in the experts subgroup)
#    * representational similarity analysis (RSA) of pairwise decodings
#    * multidimensional scaling for both groups
#
# 4. perfrom statistical anlyses
#    * repeated measures ANOVA (rmANOVA) on pairwise decodings for French script
#    * rmANOVA on pairwise decodings for Braille script
#    * rmANOVA on pairwise decodings for both scripts
# VWFA
viz_processROI("expansion", "VWFA")
# left LO
viz_processROI("expansion", "lLO")
# right LO
viz_processROI("expansion", "rLO")
# left Posterior Temporal
viz_processROI("language", "lPosTemp")
# V1
viz_processROI("earlyVisual", "V1")
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
# Read the table containing experts' VWFA coordinates
coordinates <- as.data.frame(read_excel("../stats/experts_vwfa_coordinates.xlsx"))
coordinates <- as.data.frame(read_excel("../stats/reports/experts_vwfa_coordinates.xlsx"))
# Split according to the contrast used
contrast_division <- group_split(coordinates, Area)
vwfa_fr <- contrast_division[[2]]
vwfa_br <- contrast_division[[1]]
# make some order
vwfa_fr <- subset(vwfa_fr, select = -c(1, 2))
vwfa_br <- subset(vwfa_br, select = -c(1, 2))
# Run t-test on the sets of coordinates
ttest_x <- t.test(vwfa_fr$X, vwfa_br$X)
ttest_y <- t.test(vwfa_fr$Y, vwfa_br$Y)
ttest_z <- t.test(vwfa_fr$Z, vwfa_br$Z)
ttest_x
ttest_y
ttest_z
