0,    a[6], a[5], a[4])
rdm_template <- expand.grid(X=x, Y=y)
rdm_template$accuracy <- template
ggplot(rdm_template, aes(X, Y, fill= accuracy)) +
geom_tile() +
theme_classic() +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_text(face="bold", colour="black", size = 20),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(face="bold", colour="black", size = 20)) +
scale_fill_gradient2(high = thisColor,
limit = c(0,1),
na.value = "white",) +
guides(fill = guide_colourbar(barwidth = 0.7,
barheight = 20,
ticks = FALSE)) +
labs(title = thisCluster)
rdm_template
temp$mean_accuracy
temp$mean_accuracy[]
a <- ifelse(thisCluster == "model", c(1/3, 2/3, 1/3, 3/3, 2/3, 1/3),
temp$mean_accuracy[])
c(temp$mean_accuracy)
a <- ifelse(thisCluster == "model", c(1/3, 2/3, 1/3, 3/3, 2/3, 1/3),
c(temp$mean_accuracy))
a <- ifelse(thisCluster == "model", c(1/3, 2/3, 1/3, 3/3, 2/3, 1/3),
temp$mean_accuracy[:])
a <- temp$mean_accuracy
# make labels
x <- c("RW", "PW", "NW", "FS")
y <- c("FS", "NW", "PW", "RW")
# Manually re-arrange matrices
template = c(
a[4], a[2], a[1], 0,
a[5], a[3], 0,    a[1],
a[6], 0,    a[3], a[2],
0,    a[6], a[5], a[4])
rdm_template <- expand.grid(X=x, Y=y)
rdm_template$accuracy <- template
View(rdm_template)
# Plot with selected color
ggplot(rdm_template, aes(X, Y, fill= accuracy)) +
geom_tile() +
theme_classic() +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_text(face="bold", colour="black", size = 20),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(face="bold", colour="black", size = 20)) +
scale_fill_gradient2(high = thisColor,
limit = c(0,1),
na.value = "white",) +
guides(fill = guide_colourbar(barwidth = 0.7,
barheight = 20,
ticks = FALSE)) +
labs(title = thisCluster)
coord_fixed()
# Manually re-arrange matrices
template = c(
a[4], a[2], a[1], NA,
a[5], a[3], NA,    a[1],
a[6], NA,    a[3], a[2],
NA,    a[6], a[5], a[4])
rdm_template <- expand.grid(X=x, Y=y)
rdm_template$accuracy <- template
# Plot with selected color
ggplot(rdm_template, aes(X, Y, fill= accuracy)) +
geom_tile() +
theme_classic() +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_text(face="bold", colour="black", size = 20),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(face="bold", colour="black", size = 20)) +
scale_fill_gradient2(high = thisColor,
limit = c(0,1),
na.value = "white",) +
guides(fill = guide_colourbar(barwidth = 0.7,
barheight = 20,
ticks = FALSE)) +
labs(title = thisCluster)
coord_fixed()
ggsave(nameList[1], width = 2000, height = 1600, dpi = 320, units = "px")
nameList[1]
source("viz_processROI.R")
viz_processROI("expansion", "VWFA")
viz_processROI("expansion", "VWFA")
viz_processROI("expansion", "VWFA")
library("readxl")
library("tidyverse")
library("reshape2")
library("gridExtra")
library("pracma")
library("dplyr")
library("data.table")
### Load slopes report and plot mean slope
# Load slopes report
slopes <- read.csv("../ppi/slopesReport.txt")
# Manipulate the matrix to get something readable by ggplot
slopes <- as.data.frame(slopes)
# Add cluster, for coloring purposes
slopes$cluster <- ifelse(slopes$script == "french",
ifelse(slopes$group == "expert",
"french_expert",
"french_control"),
ifelse(slopes$group == "expert",
"braille_expert",
"braille_control"))
slopes$specify <- ifelse(slopes$group == "expert",
paste(slopes$condition,"_exp",sep=""),
paste(slopes$condition,"_ctr",sep=""))
# Sub-010, 018, 023 do not present any area in posTemp that is correlated with VWFA
# Select rows where 'subject' is not in the specified list
slopes <- slopes[!(slopes$subject %in% c("sub-010", "sub-018", "sub-023")), ]
# calculate stats for error bars
stats_slopes <- slopes %>% group_by(group, script, specify, cluster) %>%
summarize(mean_slope = mean(slope), sd_slope = sd(slope), se_slope = sd(slope)/sqrt(6),
mean_intercept = mean(intercept), sd_intercept = sd(intercept), se_intercept = sd(intercept)/sqrt(6),
.groups = 'keep')
### Load all the datapoints
allPoints <- read.csv("../ppi/datapointsPPI.txt")
# Manipulate the matrix to get something readable by ggplot
allPoints <- as.data.frame(allPoints)
# Sub-010, 018, 023 do not present any area in posTemp that is correlated with VWFA
# Select rows where 'subject' is not in the specified list
allPoints <- allPoints[!(allPoints$subject %in% c(10, 18, 23)), ]
### Calculate correlations between groups and scripts
# Split groups according to condition
fw_exp <-  subset(allPoints, cluster == "french_expert" & condition == "fw")
sfw_exp <- subset(allPoints, cluster == "french_expert" & condition == "sfw")
bw_exp <-  subset(allPoints, cluster == "braille_expert" & condition == "bw")
sbw_exp <- subset(allPoints, cluster == "braille_expert" & condition == "sbw")
fw_ctr <-  subset(allPoints, cluster == "french_control" & condition == "fw")
sfw_ctr <- subset(allPoints, cluster == "french_control" & condition == "sfw")
bw_ctr <-  subset(allPoints, cluster == "braille_control" & condition == "bw")
sbw_ctr <- subset(allPoints, cluster == "braille_control" & condition == "sbw")
fw_exp_split <- group_split(fw_exp, subject)
sfw_exp_split <- group_split(sfw_exp, subject)
bw_exp_split <- group_split(bw_exp, subject)
sbw_exp_split <- group_split(sbw_exp, subject)
fw_ctr_split <- group_split(fw_ctr, subject)
sfw_ctr_split <- group_split(sfw_ctr, subject)
bw_ctr_split <- group_split(bw_ctr, subject)
sbw_ctr_split <- group_split(sbw_ctr, subject)
# create correlation table containing all the results
corr_table <- data.table(subject = character(), condition = character(), correlation = numeric())
# for each condition, calculate correlations within a participant
for (i in 1:length(fw_exp_split)) {
corr_res <- cor(fw_exp_split[[i]]$x, fw_exp_split[[i]]$y)
result <- data.table(subject = fw_exp_split[[i]]$subject[1],
condition = fw_exp_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(sfw_exp_split)) {
corr_res <- cor(sfw_exp_split[[i]]$x, sfw_exp_split[[i]]$y)
result <- data.table(subject = sfw_exp_split[[i]]$subject[1],
condition = sfw_exp_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(bw_exp_split)) {
corr_res <- cor(bw_exp_split[[i]]$x, bw_exp_split[[i]]$y)
result <- data.table(subject = bw_exp_split[[i]]$subject[1],
condition = bw_exp_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(sbw_exp_split)) {
corr_res <- cor(sbw_exp_split[[i]]$x, sbw_exp_split[[i]]$y)
result <- data.table(subject = sbw_exp_split[[i]]$subject[1],
condition = sbw_exp_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(fw_ctr_split)) {
corr_res <- cor(fw_ctr_split[[i]]$x, fw_ctr_split[[i]]$y)
result <- data.table(subject = fw_ctr_split[[i]]$subject[1],
condition = fw_ctr_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(sfw_ctr_split)) {
corr_res <- cor(sfw_ctr_split[[i]]$x, sfw_ctr_split[[i]]$y)
result <- data.table(subject = sfw_ctr_split[[i]]$subject[1],
condition = sfw_ctr_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(bw_ctr_split)) {
corr_res <- cor(bw_ctr_split[[i]]$x, bw_ctr_split[[i]]$y)
result <- data.table(subject = bw_ctr_split[[i]]$subject[1],
condition = bw_ctr_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
for (i in 1:length(sbw_ctr_split)) {
corr_res <- cor(sbw_ctr_split[[i]]$x, sbw_ctr_split[[i]]$y)
result <- data.table(subject = sbw_ctr_split[[i]]$subject[1],
condition = sbw_ctr_split[[i]]$condition[1],
correlation = corr_res)
corr_table <- rbind(corr_table, result)
}
# Are correlations significantly different from one another?
# List to store t-test results
t_test_results <- list()
# Unique labels in the data
unique_conditions <- unique(corr_table$condition)
# Loop through each unique label and perform a t-test
# for (i in 1:(length(unique_conditions) - 1)) {
#   for (j in (i + 1):length(unique_conditions)) {
#     cond1 <- unique_conditions[i]
#     cond2 <- unique_conditions[j]
#
#     # Subset data for the two labels
#     subset_data1 <- subset(corr_table, condition  == cond1)
#     subset_data2 <- subset(corr_table, condition  == cond2)
#
#     # Perform a two-sample t-test
#     t_test_result <- t.test(subset_data1, subset_data2)
#
#     # Store the t-test result in the list
#     t_test_results[[paste(label1, "-", label2)]] <- t_test_result
#   }
# }
# Print t-test results
# for (label_pair in names(t_test_results)) {
#   cat("T-Test Results for", label_pair, ":\n")
#   print(t_test_results[[label_pair]])
#   cat("\n")
# }
# add cluster
corr_table <- corr_table %>%
mutate(group = ifelse(subject %in% c(6, 7, 8, 9, 13), "expert", "control"))
corr_table <- corr_table %>%
mutate(script = ifelse(condition %in% c("fw","sfw"), "french", "braille"))
corr_table$cluster <- paste(corr_table$script,corr_table$group,sep="_")
corr_table$condition <- ifelse(corr_table$group == "expert",
paste(corr_table$condition,"_exp",sep=""),
paste(corr_table$condition,"_ctr",sep=""))
# calculate stats for error bars
stats_corr <- corr_table %>% group_by(condition, cluster) %>%
summarize(mean_corr = mean(correlation), sd_corr = sd(correlation), se_corr = sd(correlation)/sqrt(6),
.groups = 'keep')
slopes <- slopes %>% mutate(difference = slope[condition == 'fw'] - slope[condition == 'sfw'])
slopes_summary <- slopes %>% mutate(difference = slope[condition == 'fw'] - slope[condition == 'sfw'])
for (i in c(1, 3, 5, 7, 9, 11, 13, 15, 17, 19,
21, 23, 25, 27, 29, 31, 33, 35, 37, 39,
41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63)) {
diff <- data.table(subject = slopes$subject[i],
group = slopes$group[i],
script = slopes$script[i],
condition = slopes$condition[i],
difference = slopes$slope[i] - slopes$slope[i+1],
cluster = slopes$cluster[i],
specify = slopes$specify[i])
slopes_diff <- rbind(slopes_diff, diff)
}
slopes_diff <- data.frame()
# make new table, with everything but the slopes and the intercept to only keep the difference
for (i in c(1, 3, 5, 7, 9, 11, 13, 15, 17, 19,
21, 23, 25, 27, 29, 31, 33, 35, 37, 39,
41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63)) {
diff <- data.table(subject = slopes$subject[i],
group = slopes$group[i],
script = slopes$script[i],
condition = slopes$condition[i],
difference = slopes$slope[i] - slopes$slope[i+1],
cluster = slopes$cluster[i],
specify = slopes$specify[i])
slopes_diff <- rbind(slopes_diff, diff)
}
View(slopes_diff)
write.csv(slopes_diff, "slopes_diff.csv", row.names=FALSE)
stats_diff <- slopes_diff %>% group_by(group, script, specify, cluster) %>%
summarize(mean_diff = mean(difference), sd_slope = sd(difference), se_slope = sd(difference)/sqrt(6),
.groups = 'keep')
View(stats_diff)
stats_diff <- slopes_diff %>% group_by(group, script, specify, cluster) %>%
summarize(mean_diff = mean(difference), sd_diff = sd(difference), se_diff = sd(difference)/sqrt(6),
.groups = 'keep')
# Bar plot of differences in slopes
ggplot(stats_diff, aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = c("bw_ctr","bw_exp","fw_ctr","fw_exp"),
labels = c("CTR-BR","EXP-BR","CTR-FR","EXP-FR")) +
labs(x = "Stimulus condition", y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
# Bar plot of differences in slopes
ggplot(stats_diff, aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = c("bw_ctr","bw_exp","fw_ctr","fw_exp"),
labels = c("CTR-BR","EXP-BR","CTR-FR","EXP-FR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
# Bar plot of differences in slopes
ggplot(stats_diff, aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("CTR-BR","EXP-BR","CTR-FR","EXP-FR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggplot(data = subest(stats_diff, difference != NA), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggplot(data = subset(stats_diff, difference != NA), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggplot(data = subset(stats_diff, mean_diff != NA), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = slopes_diff,
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggplot(data = subset(stats_diff, ~is.na(mean_diff)), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = subset(slopes_diff, ~is.na(difference)),
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
subset(stats_diff, ~is.na(mean_diff))
ggplot(data = subset(stats_diff, !is.na(mean_diff)), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = subset(slopes_diff, ~is.na(difference)),
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggplot(data = subset(stats_diff, !is.na(mean_diff)), aes(x = specify, y = mean_diff)) +
geom_col(aes(x = specify, y = mean_diff, fill = cluster)) +
geom_errorbar(aes(ymin = mean_diff - se_diff, ymax = mean_diff + se_diff), width = 0) +
scale_fill_manual(name = "script x group",
limits = c("french_expert",   "braille_expert",   "french_control",   "braille_control"),
values = c("#69B5A2",         "#FF9E4A",          "#699ae5",          "#da5F49"),
labels = c("french - expert", "braille - expert", "french - control", "braille - control")) +
# Individual data clouds
geom_point(data = subset(slopes_diff, !is.na(difference)),
aes(x = reorder(specify, cluster),
y = difference),
position = position_jitter(w = 0.3, h = 0.01),
alpha = 0.3,
legend = F) +
theme_classic() +                                                              # white background, simple theme
theme(axis.ticks = element_blank()) +
scale_x_discrete(limits = rev,
labels = c("EXP-FR","CTR-FR","EXP-BR","CTR-BR")) +
labs(y = "VWFA-LPosTemp slopes difference", title = "Average mean slope in PPI: VWFA x LPosTEmp")
ggsave("figures/cond-PPI_areas-VWFA-LPosTemp_mean-difference.png", width = 3000, height = 1800, dpi = 320, units = "px")
source("viz_processROI.R")
method <- "expansion"
area <- "VWFA"
## Import
# Get options relative to the file
decoding <- "pairwise"
modality <- "within"
group <- "all"
space <- "IXI549Space"
roi <- method
# Load file
pairwise <- viz_dataset_import(decoding, modality, group, space, roi)
# Clean file: remove unnecessary lines, add information about group and script
pairwise <- viz_dataset_clean(pairwise)
# In the case of expansion, we clustered three ROIs
# Separate them and keep only the relevant one
if(method == 'expansion')
pairwise <- pairwise %>% filter(mask == area)
pairwise_fr <- pairwise %>% filter(script == "french")
pairwise_br <- pairwise %>% filter(script == "braille")
# Run ANOVAs
pairwise_anova_fr <- viz_stats_rmANOVA(pairwise_fr, 1)
pairwise_anova_br <- viz_stats_rmANOVA(pairwise_br, 1)
pairwise_anova_both <- viz_stats_rmANOVA(pairwise, 2)
# Generate filename
name_specs <- viz_make_specs(decoding, modality, group, space, area)
# Make summary table to show
viz_stats_summary(pairwise_anova_fr, "french", name_specs)
viz_stats_summary(pairwise_anova_br, "braille", name_specs)
viz_stats_summary(pairwise_anova_both, "both", name_specs)
pairwise_stats <- viz_dataset_stats(pairwise)
pairwise_stats_fr <- viz_dataset_stats(pairwise_fr)
pairwise_stats_br <- viz_dataset_stats(pairwise_br)
# Decoding
viz_plot_pairwise(pairwise, pairwise_stats, name_specs)
dataIn <- pairwise
statsIn <- pairwise_stats
specs <- name_specs
nameList <- c(paste(specs, "_plot-rdm-expfr.png", sep=""),
paste(specs, "_plot-rdm-expbr.png", sep=""),
paste(specs, "_plot-rdm-ctrfr.png", sep=""),
paste(specs, "_plot-rdm-ctrbr.png", sep=""),
paste(specs, "_plot-rdm-model.png", sep=""))
View(pairwise_stats)
a <- c(1/3, 2/3, 1/3, 3/3, 2/3, 1/3)
